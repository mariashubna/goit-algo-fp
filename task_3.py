import heapq
import networkx as nx
import matplotlib.pyplot as plt

G = nx.Graph()

edges = [
    ("Індустр.", "Тракт. завод", 1.59),
    ("Тракт. завод", "Масельського", 1.51),
    ("Масельського", "Армійська", 1.29),
    ("Армійська", "Палац Спорту", 1.65),
    ("Палац Спорту", "Турбоатом", 1.52),
    ("Турбоатом", "Завод Малишева", 1.51),
    ("Завод Малишева", "Спортивна", 1.52),
    ("Спортивна", "Пр. Гагаріна", 1.31),
    ("Пр. Гагаріна", "Майдан Конституції", 2.2),
    ("Майдан Конституції", "Цент. ринок", 0.87),
    ("Цент. ринок", "Південний вокзал", 1.07),
    ("Південний вокзал", "Холодна гора", 1.97),
    ("Героїв Праці", "Студентська", 0.93),
    ("Студентська", "Ак. Павлова", 1.22),
    ("Ак. Павлова", "Ак. Барабашова", 1.5),
    ("Ак. Барабашова", "Київська", 2.36),
    ("Київська", "Я. Мудрого", 1.6),
    ("Я. Мудрого", "Університет", 1.06),
    ("Університет", "Іст. музей", 1.64),
    ("Перемога", "Олексіївська", 1.11),
    ("Олексіївська", "23 Серпня", 2.01),
    ("23 Серпня", "Ботсад", 1.06),
    ("Ботсад", "Наукова", 1.5),
    ("Наукова", "Держпром", 1.01),
    ("Держпром", "Арх. Бекетова", 1),
    ("Арх. Бекетова", "Захисників України", 2.11),
    ("Захисників України", "Метробудівників", 1.18),
    ("Майдан Конституції", "Іст. музей", 0.047),
    ("Університет", "Держпром", 0.156),
    ("Спортивна", "Метробудівників", 0.144)
]

G.add_weighted_edges_from(edges)


def dijkstra_heap(graph, start):
    distances = {vertex: float('infinity') for vertex in graph.nodes()}
    distances[start] = 0
    
    priority_queue = [(0, start)]
    
    while priority_queue:
        current_distance, current_vertex = heapq.heappop(priority_queue)
        
        if current_distance > distances[current_vertex]:
            continue
        
        for neighbor, data in graph[current_vertex].items():
            distance = current_distance + data['weight']
            
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))
    
    return distances

distances = dijkstra_heap(G, 'Індустр.')
print(distances)

node_colors = ['red' if node in ["Індустр.", "Тракт. завод", "Масельського", "Армійська", "Палац Спорту", "Турбоатом", "Завод Малишева", "Спортивна", "Пр. Гагаріна", "Майдан Конституції", "Цент. ринок", "Південний вокзал", "Холодна гора"] else 'blue' if node in ["Героїв Праці", "Студентська", "Ак. Павлова", "Ак. Барабашова", "Київська", "Я. Мудрого", "Університет", "Іст. музей"] else 'green' for node in G.nodes()]

pos = {'Індустр.': (11.5, -4.6),
    'Тракт. завод': (10.5, -3.6),
    'Масельського': (9.5, -2.6),
    'Армійська': (8.5, -1.6),
    'Палац Спорту': (7.5, -0.6),
    'Турбоатом': (6.5, 0.4),
    'Завод Малишева': (5.5, 1.0),
    'Спортивна': (3.4, 0.4),
    'Пр. Гагаріна': (0, 1.2),
    'Майдан Конституції': (-0.5, 3.2),
    'Цент. ринок': (-2.5, 3),
    'Південний вокзал': (-3, 2.5),
    'Холодна гора': (-4, 1.5),
    'Героїв Праці': (6.5, 6.8),
    'Студентська': (5.8, 6),
    'Ак. Павлова': (5.2, 5.2),
    'Ак. Барабашова': (4.5, 4.7),
    'Київська': (3.5, 4.5),
    'Я. Мудрого': (2, 5),
    'Університет': (1, 4.5),
    'Іст. музей': (0, 4),
    'Перемога': (0, 9),
    'Олексіївська': (1, 8),
    '23 Серпня': (1, 7),
    'Ботсад': (1, 6),
    'Наукова': (1, 5),
    'Держпром': (1, 4),
    'Арх. Бекетова': (2, 3),
    'Захисників України': (3, 2),
    'Метробудівників': (4, 1)
}
nx.draw(G, pos, with_labels=True, node_size=100, node_color=node_colors, font_size=6, font_weight='bold')
labels = nx.get_edge_attributes(G, 'weight')
nx.draw_networkx_edge_labels(G, pos, edge_labels=labels, font_size=8)
plt.show()